// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NestAdsSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
import AdSupport
import AppTrackingTransparency
import CommonCrypto
import Compression
import CoreTelephony
import Foundation
@_exported import NestAdsSDK
import Network
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
import zlib
@_hasMissingDesignatedInitializers open class NestAdsAdStringMeta {
  open var value: Swift.String?
  open var landingURL: Swift.String?
  @objc deinit
}
extension CoreMedia.CMTime : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public func toDisplayString() -> Swift.String
  public func toCMTimeInteger() -> Swift.Int
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class NestAdsMediaView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency open var mediaContent: NestAdsSDK.NestAdsMediaContent? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override public static var layerClass: Swift.AnyClass {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol NestAdsCustomNativeAdDelegate : AnyObject {
  func customNativdAdDidRecordImpression(_ nativeAd: NestAdsSDK.NestAdsCustomNativeAd)
  func customNativeAdDidRecordClick(_ nativeAd: NestAdsSDK.NestAdsCustomNativeAd)
  func customNativeAdWillPresentScreen(_ nativeAd: NestAdsSDK.NestAdsCustomNativeAd)
  func customNativeAdWillDismissScreen(_ nativeAd: NestAdsSDK.NestAdsCustomNativeAd)
  func customNativeAdDidDismissScreen(_ nativeAd: NestAdsSDK.NestAdsCustomNativeAd)
}
public typealias NestAdsCustomClickHandler = (Swift.String) -> Swift.Void
@_hasMissingDesignatedInitializers open class NestAdsCustomNativeAd {
  weak open var delegate: (any NestAdsSDK.NestAdsCustomNativeAdDelegate)?
  open var placementCode: Swift.String {
    get
  }
  open var availableMediaSpecIDs: [Swift.String] {
    get
  }
  open var creativeSpecID: Swift.String {
    get
  }
  open var adInfo: NestAdsSDK.NestAdsAdInfo {
    get
  }
  open var mediaContent: NestAdsSDK.NestAdsMediaContent {
    get
  }
  open var customClickHandler: NestAdsSDK.NestAdsCustomClickHandler?
  @objc deinit
  open func image(withMediaSpecID mediaSpecID: Swift.String) -> NestAdsSDK.NestAdsAdImage?
  open func string(withMediaSpecID mediaSpecID: Swift.String) -> Swift.String?
  open func landingURL(withMediaSpecID mediaSpecID: Swift.String) -> Swift.String?
  open func stringWithMeta(withMediaSpecID mediaSpecID: Swift.String) -> NestAdsSDK.NestAdsAdStringMeta?
  open func recordImpression()
  open func performClick(withMediaSpecID mediaSpecID: Swift.String)
}
extension UIKit.UIColor {
  convenience public init(red: Swift.Int, green: Swift.Int, blue: Swift.Int)
  convenience public init(rgb: Swift.Int)
  convenience public init?(hexaRGB: Swift.String, alpha: CoreFoundation.CGFloat = 1)
  convenience public init?(hexaRGBA: Swift.String)
}
open class NestAdsPopupAdViewOptions {
  public init()
  @objc deinit
}
open class NestAdsPopupLeftButtonOptions : NestAdsSDK.NestAdsPopupAdViewOptions {
  open var text: Swift.String
  open var fontName: Swift.String
  open var fontColor: UIKit.UIColor
  open var backgroundColor: UIKit.UIColor
  open var borderColor: CoreGraphics.CGColor
  public init(text: Swift.String? = nil, fontName: Swift.String? = nil, fontColor: UIKit.UIColor? = nil, backgroundColor: UIKit.UIColor? = nil, borderColor: CoreGraphics.CGColor? = nil)
  @objc deinit
}
open class NestAdsPopupRightButtonOptions : NestAdsSDK.NestAdsPopupAdViewOptions {
  open var text: Swift.String
  open var fontName: Swift.String
  open var fontColor: UIKit.UIColor
  open var backgroundColor: UIKit.UIColor
  open var borderColor: CoreGraphics.CGColor
  public init(text: Swift.String? = nil, fontName: Swift.String? = nil, fontColor: UIKit.UIColor? = nil, backgroundColor: UIKit.UIColor? = nil, borderColor: CoreGraphics.CGColor? = nil)
  @objc deinit
}
open class NestAdsPopupImageOptions : NestAdsSDK.NestAdsPopupAdViewOptions {
  open var backgroundColor: UIKit.UIColor?
  open var borderColor: CoreGraphics.CGColor
  open var imageSize: NestAdsSDK.NestAdsAdSize?
  public init(backgroundColor: UIKit.UIColor? = nil, borderColor: CoreGraphics.CGColor? = nil, imageSize: NestAdsSDK.NestAdsAdSize? = nil)
  @objc deinit
}
open class NestAdsPopupLayoutConstraintsOptions : NestAdsSDK.NestAdsPopupAdViewOptions {
  open var topInset: CoreFoundation.CGFloat
  open var leadingInset: CoreFoundation.CGFloat
  open var trailingInset: CoreFoundation.CGFloat
  open var bottomInset: CoreFoundation.CGFloat
  public init(topInset: CoreFoundation.CGFloat? = nil, leadingInset: CoreFoundation.CGFloat? = nil, trailingInset: CoreFoundation.CGFloat? = nil, bottomInset: CoreFoundation.CGFloat? = nil)
  @objc deinit
}
open class NestAdsAdLoaderOptions {
  public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class NestAdsVideoOptions : NestAdsSDK.NestAdsAdLoaderOptions {
  open var startMuted: Swift.Bool
  open var customControlsRequested: Swift.Bool
  open var playCondition: Swift.String
  open var customAudioSessionRequested: Swift.Bool
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class NestAdsNativeAdImageAdLoaderOptions : NestAdsSDK.NestAdsAdLoaderOptions {
  open var disableImageLoading: Swift.Bool
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class NestAdsMultipleAdsAdLoaderOptions : NestAdsSDK.NestAdsAdLoaderOptions {
  open var numberOfAds: Swift.Int
  override public init()
  @objc deinit
}
@objc public protocol NestAdsAdLoaderDelegate {
  @objc func adLoader(_ adLoader: NestAdsSDK.NestAdsAdLoader, didFailToReceiveAdWithError error: NestAdsSDK.NestAdsAdError)
  @objc optional func adLoaderDidFinishLoading(_ adLoader: NestAdsSDK.NestAdsAdLoader)
}
public protocol NestAdsCustomNativeAdLoaderDelegate : NestAdsSDK.NestAdsAdLoaderDelegate {
  func customNativeCreativeSpecIDs(for adLoader: NestAdsSDK.NestAdsAdLoader) -> [Swift.String]
  func adLoader(_ adLoader: NestAdsSDK.NestAdsAdLoader, didReceive customNativeAd: NestAdsSDK.NestAdsCustomNativeAd)
}
@objc open class NestAdsAdLoader : ObjectiveC.NSObject {
  open var placementCode: Swift.String {
    get
    set
  }
  open var isLoading: Swift.Bool {
    get
  }
  weak open var delegate: (any NestAdsSDK.NestAdsAdLoaderDelegate)?
  public init(placementCode: Swift.String, rootViewController: UIKit.UIViewController?, adTypes: [NestAdsSDK.NestAdsAdLoaderAdType], options: [NestAdsSDK.NestAdsAdLoaderOptions]? = nil)
  open func load(_ request: NestAdsSDK.NestAdsAdRequest?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class NestAdsAdError : ObjectiveC.NSObject, Swift.Error {
  open var code: Swift.Int
  open var message: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NestAds {
  open class func sharedInstance() -> NestAdsSDK.NestAds
  open var versionNumber: NestAdsSDK.NestAdsVersionNumber {
    get
  }
  open func start()
  @objc deinit
}
public protocol NestAdsPopupAdViewDelegate : AnyObject {
  func popupAdViewDidReceiveAd(_ popupAdView: NestAdsSDK.NestAdsPopupAdView)
  func popupAdView(_ popupAdView: NestAdsSDK.NestAdsPopupAdView, didFailToReceiveAdWithError error: NestAdsSDK.NestAdsAdError)
  func popupAdViewDidRecordImpression(_ popupAdView: NestAdsSDK.NestAdsPopupAdView)
  func popupAdViewDidRecordClick(_ popupAdView: NestAdsSDK.NestAdsPopupAdView)
  func popupAdViewDidTappedLeftButton(_ popupAdView: NestAdsSDK.NestAdsPopupAdView)
  func popupAdViewDidTappedRightButton(_ popupAdView: NestAdsSDK.NestAdsPopupAdView)
  func popupAdViewDidShowAd(_ popupAdView: NestAdsSDK.NestAdsPopupAdView)
  func popupAdView(_ popupAdView: NestAdsSDK.NestAdsPopupAdView, didFailToShowAdWithError error: NestAdsSDK.NestAdsAdError)
  func popupAdViewWillPresentScreen(_ popupAdView: NestAdsSDK.NestAdsPopupAdView)
  func popupAdViewWillDismissScreen(_ popupAdView: NestAdsSDK.NestAdsPopupAdView)
  func popupAdViewDidDismissScreen(_ popupAdView: NestAdsSDK.NestAdsPopupAdView)
}
@objc @_Concurrency.MainActor @preconcurrency open class NestAdsPopupAdView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak open var delegate: (any NestAdsSDK.NestAdsPopupAdViewDelegate)?
  @_Concurrency.MainActor @preconcurrency open var placementCode: Swift.String?
  @_Concurrency.MainActor @preconcurrency open var leftButtonOptions: NestAdsSDK.NestAdsPopupLeftButtonOptions {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var rightButtonOptions: NestAdsSDK.NestAdsPopupRightButtonOptions {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var imageOptions: NestAdsSDK.NestAdsPopupImageOptions {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var layoutConstraintsOptions: NestAdsSDK.NestAdsPopupLayoutConstraintsOptions
  @_Concurrency.MainActor @preconcurrency open var adInfo: NestAdsSDK.NestAdsAdInfo {
    get
  }
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency open func load(_ request: NestAdsSDK.NestAdsAdRequest?)
  @_Concurrency.MainActor @preconcurrency open func show(in viewController: UIKit.UIViewController)
  @_Concurrency.MainActor @preconcurrency open func dismiss()
}
public struct NestAdsVersionNumber {
  public var majorVersion: Swift.Int
  public var minorVersion: Swift.Int
  public var patchVersion: Swift.Int
  public init()
  public init(majorVersion: Swift.Int, minorVersion: Swift.Int, patchVersion: Swift.Int)
}
public func NestAdsGetStringFromVersionNumber(_ version: NestAdsSDK.NestAdsVersionNumber) -> Swift.String
public func NestAdsAdSizeFromCGSize(_ size: CoreFoundation.CGSize) -> NestAdsSDK.NestAdsAdSize
@_hasMissingDesignatedInitializers open class NestAdsAdInfo {
  open var adProductID: Swift.Int64 {
    get
    set
  }
  open var campaignID: Swift.Int64 {
    get
    set
  }
  open var adGroupID: Swift.Int64 {
    get
    set
  }
  open var adID: Swift.Int64 {
    get
    set
  }
  @objc deinit
}
public let NestAdsCustomNativeAdVideoMediaSpecID: Swift.String
public let NestAdsGenderUnknown: Swift.Int
public let NestAdsGenderMale: Swift.Int
public let NestAdsGenderFemale: Swift.Int
public let NestAdsPlayConditionCustom: Swift.String
public struct NestAdsAdLoaderAdType : Swift.Hashable, Swift.Equatable, @unchecked Swift.Sendable {
  public static let customNative: NestAdsSDK.NestAdsAdLoaderAdType
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: NestAdsSDK.NestAdsAdLoaderAdType, b: NestAdsSDK.NestAdsAdLoaderAdType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct NestAdsAdSize {
  public var size: CoreFoundation.CGSize
  public init()
  public init(size: CoreFoundation.CGSize)
}
public protocol NestAdsSplashAdViewDelegate : AnyObject {
  func splashAdViewDidReceiveAd(_ splashAdView: NestAdsSDK.NestAdsSplashAdView)
  func splashAdView(_ splashAdView: NestAdsSDK.NestAdsSplashAdView, didFailToReceiveAdWithError error: NestAdsSDK.NestAdsAdError)
  func splashAdViewDidRecordImpression(_ splashAdView: NestAdsSDK.NestAdsSplashAdView)
  func splashAdViewDidReachDuration(_ splashAdView: NestAdsSDK.NestAdsSplashAdView)
}
@objc @_Concurrency.MainActor @preconcurrency open class NestAdsSplashAdView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak open var delegate: (any NestAdsSDK.NestAdsSplashAdViewDelegate)?
  @_Concurrency.MainActor @preconcurrency open var placementCode: Swift.String?
  @_Concurrency.MainActor @preconcurrency open var duration: Swift.Double
  @_Concurrency.MainActor @preconcurrency open var adInfo: NestAdsSDK.NestAdsAdInfo {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(size: NestAdsSDK.NestAdsAdSize, origin: CoreFoundation.CGPoint)
  @_Concurrency.MainActor @preconcurrency public init(size: NestAdsSDK.NestAdsAdSize)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency open func load(_ request: NestAdsSDK.NestAdsAdRequest?)
  @objc deinit
}
@objc public protocol NestAdsVideoControllerDelegate {
  @objc optional func videoControllerDidPlayVideo()
  @objc optional func videoControllerDidPauseVideo()
  @objc optional func videoControllerDidEndVideoPlayback()
  @objc optional func videoControllerDidMuteVideo(_ videoController: NestAdsSDK.NestAdsVideoController)
  @objc optional func videoControllerDidUnmuteVideo(_ videoController: NestAdsSDK.NestAdsVideoController)
  @objc optional func videoControllerDidUpdateVideoProgress(current: Foundation.TimeInterval)
  @objc optional func videoControllerDidFailToLoadVideo()
}
@objc @_inheritsConvenienceInitializers open class NestAdsVideoController : ObjectiveC.NSObject {
  weak open var delegate: (any NestAdsSDK.NestAdsVideoControllerDelegate)?
  open var isMuted: Swift.Bool {
    get
  }
  @objc deinit
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  open func setMute(_ mute: Swift.Bool)
  open func play()
  open func replay()
  open func pause()
  open func stop()
  open func customControlsEnabled() -> Swift.Bool
  @objc override dynamic public init()
}
open class NestAdsAdRequest {
  open var gender: Swift.Int?
  open var publisherProvidedID: Swift.String?
  open var age: Swift.Int?
  open var country: Swift.String?
  open var language: Swift.String?
  open var httpTimeout: Swift.Double
  open var customTargeting: [Swift.String : Swift.String]?
  open var appVersion: Swift.String?
  public init(gender: Swift.Int? = 0, publisherProvidedID: Swift.String? = nil, age: Swift.Int? = -1, country: Swift.String? = nil, language: Swift.String? = nil, httpTimeout: Foundation.TimeInterval? = 1.0, customTargeting: [Swift.String : Swift.String]? = nil, appVersion: Swift.String? = Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NestAdsMediaContent {
  open var hasVideoContent: Swift.Bool {
    get
  }
  open var videoController: NestAdsSDK.NestAdsVideoController {
    get
  }
  open var width: Swift.Int {
    get
  }
  open var height: Swift.Int {
    get
  }
  open var aspectRatio: CoreFoundation.CGFloat {
    get
  }
  open var skipOffset: Foundation.TimeInterval? {
    get
  }
  open var duration: Foundation.TimeInterval {
    get
  }
  open var currentTime: Foundation.TimeInterval {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NestAdsAdImage {
  open var image: UIKit.UIImage?
  open var imageURL: Foundation.URL?
  open var width: Swift.Int?
  open var height: Swift.Int?
  open var landingURL: Swift.String?
  @objc deinit
}
